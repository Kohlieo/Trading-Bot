import asyncio
import logging
import os
import signal
import sys
import threading
import ib_insync
import time
from quart import Quart, request, jsonify
from ib_insync import IB, Stock, LimitOrder

# Initialize logging with exception tracebacks
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Patch the asyncio event loop
ib_insync.util.patchAsyncio()

# Quart setup
app = Quart(__name__)

# IBKR connection instance
ib = IB()

# Variables to store shared state
available_equity = None
state_lock = threading.Lock()
# Store EMA values per symbol as a tuple (ema3, ema9, ema12) for trade isolation
ema_storage = {}

# Tick size cache file path for persistence
TICK_SIZE_FILE = 'tick_sizes.txt'

# Trailing stop and order parameters
take_profit_percentage = 0.05      # 5% gain (if needed in future)
initial_stop_loss_percentage = 0.02  # 2% initial stop loss
trailing_stop_loss_percentage = 0.03 # 3% trailing stop
stop_loss_fixed_trigger = 0.02       # 2% above (or below) entry price where stop loss becomes fixed
pre_market_buffer = 0.005            # 0.5% buffer for pre-market volatility

# Reverse trading flag.
# In normal mode:
#   BUY  => open long position, SELL => close long
# In reverse mode:
#   SELL => open short position, BUY => cover short
reverse_trading = True  # Set to True to enable reverse trading

def load_tick_sizes():
    """
    Load tick sizes from the persistent text file.
    """
    tick_sizes = {}
    if os.path.exists(TICK_SIZE_FILE):
        with open(TICK_SIZE_FILE, 'r') as f:
            for line in f:
                symbol, tick_size = line.strip().split(',')
                tick_sizes[symbol] = float(tick_size)
    return tick_sizes

def save_tick_sizes(tick_sizes):
    """
    Save tick sizes to the persistent text file.
    """
    with open(TICK_SIZE_FILE, 'w') as f:
        for symbol, tick_size in tick_sizes.items():
            f.write(f"{symbol},{tick_size}\n")

# Load initial tick sizes into the cache
tick_size_cache = load_tick_sizes()

def round_to_tick(value, tick_size):
    """
    Round the given value to the nearest tick size.
    """
    return round(value / tick_size) * tick_size

async def connect_ibkr():
    """
    Async function to connect to IBKR.
    """
    try:
        if not ib.isConnected():
            logging.info("Attempting to connect to IBKR...")
            host = "host.docker.internal"  # Adjust as needed
            port = 7496                   # Use port 7496 for paper trading
            client_id = 123
            logging.info(f"Connecting to {host}:{port} with client ID {client_id}")
            await ib.connectAsync(host, port, clientId=client_id, timeout=15)
            logging.info("Successfully connected to IBKR.")
    except Exception as e:
        logging.error(f"Failed to connect to IBKR at {host}:{port}: {e}", exc_info=True)

async def ensure_connection():
    """
    Ensure connection to IBKR. Reconnect if disconnected.
    """
    if not ib.isConnected():
        logging.warning("IBKR disconnected. Reconnecting...")
        await connect_ibkr()

async def get_tick_size(symbol):
    """
    Fetch the tick size for the given symbol from IBKR or cache.
    """
    if symbol in tick_size_cache:
        return tick_size_cache[symbol]
    try:
        await ensure_connection()
        contract = Stock(symbol, "SMART", "USD")
        ib.qualifyContracts(contract)
        ib.reqMarketDataType(1)  # Live data, including pre-market

        ticker = ib.reqMktData(contract, '', False, False)

        # Wait for priceIncrement to be available with a timeout
        timeout = 15.0
        elapsed = 0.0
        while not ticker.priceIncrement:
            await asyncio.sleep(0.1)
            elapsed += 0.1
            if elapsed >= timeout:
                raise Exception(f"Timeout waiting for ticker.priceIncrement for {symbol}")

        tick_size = ticker.priceIncrement
        logging.info(f"Fetched tick size for {symbol}: {tick_size}")

        tick_size_cache[symbol] = tick_size
        save_tick_sizes(tick_size_cache)

        return tick_size
    except Exception as e:
        logging.error(f"Error fetching tick size for {symbol}: {e}", exc_info=True)
        return 0.01  # Default tick size

async def cancel_active_orders(symbol):
    """
    Cancel active orders for the given symbol.
    """
    try:
        await ensure_connection()
        for trade in ib.trades():
            order = trade.order
            if trade.contract.symbol == symbol and not trade.isDone():
                ib.cancelOrder(order)
                while order.orderStatus.status not in ('Cancelled', 'Filled'):
                    await asyncio.sleep(0.1)
                logging.info(f"Cancelled order {order.orderId} for {symbol}.")
    except Exception as e:
        logging.error(f"Error cancelling orders for {symbol}: {e}", exc_info=True)

async def place_order(symbol: str, action: str, price: float = None, starting_ema_values: tuple = None) -> dict:
    """
    Place an order via IBKR while handling reverse trading.
    In normal mode:
       - BUY opens a long position.
       - SELL closes (sells) an existing long.
    In reverse mode:
       - SELL opens a short position.
       - BUY closes (covers) an existing short.
    """
    try:
        await ensure_connection()
        tick_size = await get_tick_size(symbol)
        logging.info(f"Tick size for {symbol}: {tick_size}")
        ib.reqMarketDataType(1)
        buffer = pre_market_buffer

        if not reverse_trading:
            if action.upper() == "SELL":
                await cancel_active_orders(symbol)
                result = await close_all_positions(symbol, tick_size, price)
                await get_account_balance()
                logging.info(f"All positions for {symbol} closed.")
                return {"status": f"All positions for {symbol} closed successfully.", "details": result}
            elif action.upper() == "BUY":
                if available_equity is None:
                    logging.error("Available equity not fetched yet.")
                    return {"error": "Available equity not available"}
                if price is None:
                    contract = Stock(symbol, "SMART", "USD")
                    ticker = ib.reqMktData(contract, '', False, False)
                    timeout = 15.0
                    elapsed = 0.0
                    while not ticker.last:
                        await asyncio.sleep(0.1)
                        elapsed += 0.1
                        if elapsed >= timeout:
                            raise Exception(f"Timeout waiting for ticker.last for {symbol}")
                    price = ticker.last
                    logging.info(f"Fetched latest price for {symbol}: {price}")
                adjusted_price = round_to_tick(price * (1 + buffer), tick_size)
                with state_lock:
                    quantity = int((available_equity * 0.35) // adjusted_price)
                contract = Stock(symbol, "SMART", "USD")
                main_order = LimitOrder("BUY", quantity, adjusted_price, outsideRth=True, tif='DAY')
                trade = ib.placeOrder(contract, main_order)
                await get_account_balance()
                asyncio.create_task(monitor_order(trade, symbol, quantity, adjusted_price, tick_size, starting_ema_values, is_short=False))
                logging.info(f"Order placed: BUY {quantity} {symbol} at ${adjusted_price:.2f}")
                return {"status": "Order placed successfully", "order_id": trade.order.orderId}
        else:
            if action.upper() == "SELL":
                if available_equity is None:
                    logging.error("Available equity not fetched yet.")
                    return {"error": "Available equity not available"}
                if price is None:
                    contract = Stock(symbol, "SMART", "USD")
                    ticker = ib.reqMktData(contract, '', False, False)
                    timeout = 15.0
                    elapsed = 0.0
                    while not ticker.last:
                        await asyncio.sleep(0.1)
                        elapsed += 0.1
                        if elapsed >= timeout:
                            raise Exception(f"Timeout waiting for ticker.last for {symbol}")
                    price = ticker.last
                    logging.info(f"Fetched latest price for {symbol}: {price}")
                adjusted_price = round_to_tick(price * (1 + buffer), tick_size)
                with state_lock:
                    quantity = int((available_equity * 0.65) // adjusted_price)
                contract = Stock(symbol, "SMART", "USD")
                main_order = LimitOrder("SELL", quantity, adjusted_price, outsideRth=True, tif='DAY')
                trade = ib.placeOrder(contract, main_order)
                await get_account_balance()
                asyncio.create_task(monitor_order(trade, symbol, quantity, adjusted_price, tick_size, starting_ema_values, is_short=True))
                logging.info(f"Order placed: SELL (short entry) {quantity} {symbol} at ${adjusted_price:.2f}")
                return {"status": "Short entry order placed successfully", "order_id": trade.order.orderId}
            elif action.upper() == "BUY":
                await cancel_active_orders(symbol)
                result = await close_all_positions(symbol, tick_size, price)
                await get_account_balance()
                logging.info(f"All short positions for {symbol} have been covered.")
                return {"status": f"All short positions for {symbol} covered successfully.", "details": result}
    except Exception as e:
        logging.error(f"Error placing order: {e}", exc_info=True)
        return {"error": "Failed to place order", "details": str(e)}

async def close_all_positions(symbol, tick_size, price):
    """
    Close all open positions for the given symbol.
    In normal mode, closes long positions (sells).
    In reverse mode, covers short positions (buys).
    """
    try:
        await ensure_connection()
        buffer = pre_market_buffer
        await cancel_active_orders(symbol)
        positions = ib.positions()
        if not reverse_trading:
            for position in positions:
                if position.contract.symbol == symbol and position.position > 0:
                    limit_price = round_to_tick(price * (1 - buffer), tick_size)
                    contract = Stock(symbol, "SMART", "USD")
                    sell_order = LimitOrder("SELL", position.position, limit_price, outsideRth=True, tif='DAY')
                    trade = ib.placeOrder(contract, sell_order)
                    logging.info(f"Close order placed for {symbol}: {trade.order.orderId}.")
                    asyncio.create_task(monitor_order(trade, symbol, 0, 0, tick_size, None, is_short=False))
        else:
            for position in positions:
                if position.contract.symbol == symbol and position.position < 0:
                    limit_price = round_to_tick(price * (1 + buffer), tick_size)
                    contract = Stock(symbol, "SMART", "USD")
                    cover_order = LimitOrder("BUY", abs(position.position), limit_price, outsideRth=True, tif='DAY')
                    trade = ib.placeOrder(contract, cover_order)
                    logging.info(f"Cover order placed for {symbol}: {trade.order.orderId}.")
                    asyncio.create_task(monitor_order(trade, symbol, 0, 0, tick_size, None, is_short=True))
        msg = f"Positions for {symbol} closed." if not reverse_trading else f"Short positions for {symbol} covered."
        logging.info(msg)
        return {"status": "Success", "message": msg}
    except Exception as e:
        logging.error(f"Error closing positions for {symbol}: {e}", exc_info=True)
        return {"status": "Error", "message": str(e)}

async def monitor_order(trade, symbol, quantity, entry_price, tick_size, starting_ema_values, is_short=False):
    """
    Monitor the given order and, when filled, start monitoring the price.
    The is_short flag indicates whether this order opened a short position.
    """
    try:
        while not trade.isDone():
            await asyncio.sleep(1)
        logging.info(f"Order {trade.order.orderId} completed with status {trade.orderStatus.status}")
        if trade.orderStatus.status == 'Filled':
            asyncio.create_task(monitor_price(symbol, quantity, entry_price, tick_size, starting_ema_values, is_short=is_short))
    except Exception as e:
        logging.error(f"Error monitoring order {trade.order.orderId}: {e}", exc_info=True)

async def monitor_price(symbol, total_quantity, entry_price, tick_size, starting_ema_values, is_short=False):
    """
    Monitor the price for trailing stop-loss and EMA-based exit logic.
    For long positions (is_short=False): exits are triggered when price falls.
    For short positions (is_short=True): exits (cover orders) are triggered when price rises.
    """
    try:
        contract = Stock(symbol, "SMART", "USD")
        await ensure_connection()
        ib.reqMarketDataType(1)
        ticker = ib.reqMktData(contract, '', False, False)

        if not is_short:
            highest_price = entry_price
            stop_loss_price = round_to_tick(entry_price * (1 - initial_stop_loss_percentage), tick_size)
        else:
            lowest_price = entry_price
            stop_loss_price = round_to_tick(entry_price * (1 + initial_stop_loss_percentage), tick_size)
        trailing = True

        prices = []  # For EMA calculation

        quantity_50 = total_quantity // 2
        quantity_remaining = total_quantity - quantity_50

        first_exit_done = False
        second_exit_done = False

        # Unpack starting EMA values (they are now provided as a tuple)
        ema3, ema9, ema12 = starting_ema_values if starting_ema_values else (None, None, None)

        logging.info(f"Monitoring {symbol} - Entry Price: ${entry_price:.2f}, Initial Stop-Loss: ${stop_loss_price:.2f}")
        logging.info(f"Starting EMAs - EMA3: {ema3}, EMA9: {ema9}, EMA12: {ema12}")

        while True:
            await asyncio.sleep(1)
            current_price = ticker.last if ticker.last else ticker.close
            if current_price is None:
                continue

            prices.append(current_price)
            if len(prices) > 50:
                prices.pop(0)

            if ema3 is None:
                ema3 = current_price
            else:
                ema3 = (current_price - ema3) * (2 / (3 + 1)) + ema3

            if ema9 is None:
                ema9 = current_price
            else:
                ema9 = (current_price - ema9) * (2 / (9 + 1)) + ema9

            if ema12 is None:
                ema12 = current_price
            else:
                ema12 = (current_price - ema12) * (2 / (12 + 1)) + ema12

            logging.info(f"Current Price: {current_price}")
            logging.info(f"EMA3: ${ema3:.4f}, EMA9: ${ema9:.4f}, EMA12: ${ema12:.4f}")

            if not is_short:
                if not first_exit_done and ema3 < ema9:
                    logging.info(f"{symbol}: EMA3 has crossed below EMA9. Selling 50% of the position.")
                    await place_sell_order(symbol, quantity_50, current_price, tick_size)
                    first_exit_done = True

                if first_exit_done and not second_exit_done and ema3 < ema12:
                    logging.info(f"{symbol}: EMA3 has crossed below EMA12. Selling remaining position.")
                    await place_sell_order(symbol, quantity_remaining, current_price, tick_size)
                    second_exit_done = True

                if trailing:
                    if current_price > highest_price:
                        highest_price = current_price
                        stop_loss_price = round_to_tick(highest_price * (1 - trailing_stop_loss_percentage), tick_size)
                        logging.info(f"New high for {symbol}: ${highest_price:.2f}, Trailing Stop-Loss updated to ${stop_loss_price:.2f}")
                    if current_price >= entry_price * (1 + stop_loss_fixed_trigger):
                        trailing = False
                        stop_loss_price = round_to_tick(current_price * (1 - trailing_stop_loss_percentage), tick_size)
                        logging.info(f"{symbol} has reached price target. Stop-loss fixed at ${stop_loss_price:.2f}")
                if current_price <= stop_loss_price:
                    logging.info(f"{symbol} has reached the stop-loss price of ${stop_loss_price:.2f}. Initiating sell order.")
                    remaining_quantity = total_quantity
                    if first_exit_done:
                        remaining_quantity -= quantity_50
                    if second_exit_done:
                        remaining_quantity = 0
                    if remaining_quantity > 0:
                        await place_sell_order(symbol, remaining_quantity, current_price, tick_size)
                    break

                if first_exit_done and second_exit_done:
                    logging.info(f"{symbol}: All positions have been sold based on EMA crossovers.")
                    break
            else:
                if not first_exit_done and ema3 > ema9:
                    logging.info(f"{symbol}: EMA3 has crossed above EMA9. Covering 50% of the position.")
                    await place_cover_order(symbol, quantity_50, current_price, tick_size)
                    first_exit_done = True

                if first_exit_done and not second_exit_done and ema3 > ema12:
                    logging.info(f"{symbol}: EMA3 has crossed above EMA12. Covering remaining position.")
                    await place_cover_order(symbol, quantity_remaining, current_price, tick_size)
                    second_exit_done = True

                if trailing:
                    if current_price < lowest_price:
                        lowest_price = current_price
                        stop_loss_price = round_to_tick(lowest_price * (1 + trailing_stop_loss_percentage), tick_size)
                        logging.info(f"New low for {symbol}: ${lowest_price:.2f}, Trailing Stop-Loss updated to ${stop_loss_price:.2f}")
                    if current_price <= entry_price * (1 - stop_loss_fixed_trigger):
                        trailing = False
                        stop_loss_price = round_to_tick(current_price * (1 + trailing_stop_loss_percentage), tick_size)
                        logging.info(f"{symbol} has reached price target. Stop-loss fixed at ${stop_loss_price:.2f}")
                if current_price >= stop_loss_price:
                    logging.info(f"{symbol} has reached the stop-loss price of ${stop_loss_price:.2f}. Initiating cover order.")
                    remaining_quantity = total_quantity
                    if first_exit_done:
                        remaining_quantity -= quantity_50
                    if second_exit_done:
                        remaining_quantity = 0
                    if remaining_quantity > 0:
                        await place_cover_order(symbol, remaining_quantity, current_price, tick_size)
                    break

                if first_exit_done and second_exit_done:
                    logging.info(f"{symbol}: All positions have been covered based on EMA crossovers.")
                    break

        logging.info(f"Monitoring for {symbol} completed.")

    except Exception as e:
        logging.error(f"Error monitoring price for {symbol}: {e}", exc_info=True)

async def place_sell_order(symbol, quantity, current_price, tick_size):
    """
    Place a sell order for long position exits.
    """
    try:
        await ensure_connection()

        if quantity <= 0:
            logging.warning(f"No quantity left to sell for {symbol}.")
            return

        contract = Stock(symbol, "SMART", "USD")
        ib.reqMarketDataType(1)
        buffer = pre_market_buffer
        limit_price = round_to_tick(current_price * (1 - buffer), tick_size)
        sell_order = LimitOrder("SELL", quantity, limit_price, outsideRth=True, tif='DAY')
        sell_trade = ib.placeOrder(contract, sell_order)
        await get_account_balance()
        logging.info(f"Placed SELL order for {quantity} {symbol} at ${limit_price:.2f}")
        asyncio.create_task(monitor_order(sell_trade, symbol, 0, 0, tick_size, None, is_short=False))
    except Exception as e:
        logging.error(f"Error placing sell order for {symbol}: {e}", exc_info=True)

async def place_cover_order(symbol, quantity, current_price, tick_size):
    """
    Place a cover (BUY) order for closing short positions.
    """
    try:
        await ensure_connection()

        if quantity <= 0:
            logging.warning(f"No quantity left to cover for {symbol}.")
            return

        contract = Stock(symbol, "SMART", "USD")
        ib.reqMarketDataType(1)
        buffer = pre_market_buffer
        limit_price = round_to_tick(current_price * (1 + buffer), tick_size)
        cover_order = LimitOrder("BUY", quantity, limit_price, outsideRth=True, tif='DAY')
        cover_trade = ib.placeOrder(contract, cover_order)
        await get_account_balance()
        logging.info(f"Placed COVER order for {quantity} {symbol} at ${limit_price:.2f}")
        asyncio.create_task(monitor_order(cover_trade, symbol, 0, 0, tick_size, None, is_short=True))
    except Exception as e:
        logging.error(f"Error placing cover order for {symbol}: {e}", exc_info=True)

@app.route('/webhook', methods=['POST'])
async def webhook():
    """
    Handle incoming webhook requests to place orders.
    Note: The reverse trading logic is handled inside place_order.
    """
    data = await request.get_json()
    logging.debug(f"Received data: {data}")

    symbol = data.get('symbol')
    action = data.get('action')
    price = data.get('price')

    logging.debug(f"Symbol: {symbol}, Action: {action}, Price: {price}")

    starting_ema3 = data.get('ema3')
    starting_ema9 = data.get('ema9')
    starting_ema12 = data.get('ema12')

    if not symbol or not action or price is None:
        logging.error("Invalid input data")
        return jsonify({"error": "Invalid input"}), 400

    valid_actions = {'BUY', 'SELL'}
    if action.upper() not in valid_actions:
        logging.error("Invalid action specified")
        return jsonify({"error": "Invalid action"}), 400

    try:
        price = float(price)
        starting_ema3 = float(starting_ema3) if starting_ema3 else None
        starting_ema9 = float(starting_ema9) if starting_ema9 else None
        starting_ema12 = float(starting_ema12) if starting_ema12 else None
    except ValueError:
        logging.error("Invalid numerical value in input")
        return jsonify({"error": "Invalid numerical value in input"}), 400

    # Store EMA values as a tuple for proper isolation between trades
    ema_storage[symbol] = (starting_ema3, starting_ema9, starting_ema12)

    loop = asyncio.get_running_loop()
    loop.create_task(place_order(symbol, action, price, starting_ema_values=ema_storage[symbol]))

    return jsonify({"message": "Order request is being processed."}), 202

async def get_account_balance():
    """
    Fetches and sets the available equity.
    """
    global available_equity
    try:
        await ensure_connection()
        if not ib.isConnected():
            logging.error("Cannot get account balance because IBKR is not connected.")
            return
        account_summary = await ib.accountSummaryAsync()
        for account_value in account_summary:
            if account_value.tag == 'AvailableFunds':
                with state_lock:
                    available_equity = float(account_value.value)
                logging.info(f"Available Equity: {available_equity}")
                break
    except Exception as e:
        logging.error(f"Error getting account balance: {e}", exc_info=True)

async def sync_positions_with_ibkr():
    """
    Log current IBKR positions at startup.
    """
    try:
        await ensure_connection()
        positions = ib.positions()
        for position in positions:
            symbol = position.contract.symbol
            logging.info(f"Position: {symbol}, Quantity: {position.position}, Avg Cost: {position.avgCost}")
    except Exception as e:
        logging.error(f"Error syncing positions with IBKR: {e}", exc_info=True)

def signal_handler(sig, frame):
    """
    Handle shutdown signals to gracefully disconnect from IBKR.
    """
    logging.info("Shutting down...")
    if ib.isConnected():
        ib.disconnect()
    sys.exit(0)

# Register signal handlers for graceful shutdown (only once)
signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

async def main():
    """
    Main function to start the application.
    """
    await connect_ibkr()
    await get_account_balance()
    await sync_positions_with_ibkr()
    await app.run_task(debug=True, host='0.0.0.0', port=5000)

if __name__ == "__main__":
    while True:
        try:
            asyncio.run(main())
        except Exception as e:
            logging.error(f"Fatal error: {e}. Restarting in 5 seconds...")
            time.sleep(5)
